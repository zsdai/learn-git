yum install -y tree nmap sysstat lrzsz dos2unix

-- help 简单帮助
man		==复杂命令帮助
help	==命令的帮助（bash的内置命令）使用man cd可以提示出内置命令，因为cd不是
--------------------------------------------------------------------------------
pwd 显示当前目录
--------------------------------------------------------------------------------
ls=		==list
	-l 以长列表的方式显示
	-d 显示目录
	-F classify(归类)给不同文件类型附加指标（一个* / = > @ |） 
		/目录 =socket文件 *连接文件
	-p 给目录加/
	-t 按修改时间排序（默认降序）
	-r 排序反转--reverse 
		查找最近改动的文件(放在最下面)  ls -trl
	-a 显示隐藏文件
	--color=auto 给输出的不同类型文件添加颜色
		/bin/ls -l --color=auto /etc/
	--time-style=long/long-iso 显示友好的长格式时间
		
[root@localhost data]# ls -lhi | tail -3
1328548 -rw-r--r-- 1 root root    0 Jul 17 00:06 file7
1328549 -rw-r--r-- 1 root root    0 Jul 17 00:06 file8
1328555 -rw-r--r-- 1 root root 140K Jul 19 01:09 res.csv
1310722 -rw-r--r--. 1 root root  41K Nov 30  2016 install.log

第一列:inode（index node）索引节点编号；它是文件或目录在磁盘里的唯一标示，相当于身份证
	linux读取文件首先要读取这个索引节点。像书的目录。
	每个存储设备或分区被格式化为ext4后，生成包含：一部分是inode ，一部分为block
		inode:存放文件属性(不包括文件名),还包含指向该文件的指针
			是一块磁盘空间。C6非启动分区每一个inode默认大小256字节，C5128字节
			1.inode号唯一，相同则互为硬链接
			2.一个文件创建至少占用一个inode和1个block
			如何指定inode大小 mkfs.ext4 -b 2048 -I 256 /dev/sdb
		block:存放文件具体内容
			block的大小一般有1k2k4k几种。其中引导分区为1k，普通分区4k
			1.磁盘读取的数据是按block为单位来读取的,每读取一个block都会消耗一次磁盘IO
				因此提升IO性能，可以提升block大小
			2.文件和block===1对多的关系：
				1个文件包含1个或多个block，1个block只能属于一个文件，
				因此大文件使用较大block可以提升IO，小文件使用小block可以节省磁盘。
			3.生产环境一般为4K
		dumpe2fs -查看 ext2/ext3/ext4文件系统信息
		dumpe2fs /dev/sda3| grep -iE "block size | inode size"
		dumpe2fs /dev/sda1| grep -iE "block count|inode count"
第二列：
	第1个字符：文件类型
		b      **设备、块文件block (buffered) special
		c      字符设备
				mknod oldboy c 5 1
		d      *****目录
		p      管道文件(FIFO)
		-      *****普通文件：纯文本、二进制、数据文件，可以使用file+文件名，查看具体信息file=
		l	   ***软连接，有-L或者-follow，-l会失效，除非让软连接失效；
				如果你要在有-L的情况下找软连接文件，使用-xtype
		s      socket
	第2-10个字符:rw-r--r-- ：文件权限 r读 w写 x执行 -没有，特殊权限位(suid/sgid)：t T s S x +
		Linux普通文件的读、写、执行权限说明：
			r可读：具有读取文件内容的权限
			w可写：表示具有添加、修改文件内容的权限
				（如果没有r，vi无法编辑，强制wq！的话会覆盖数据，echo可以追加）
				注意：①对文件内容修改是影响文件的block，受文件的inode（含有权限）影响
					  ②对文件的删除是影响文件的文件名，文件名存在于上级目录的block中，
					  受上级目录的inode（含权限）影响
					删除文件条件：用户为上级目录所属者，且具有wx(与文件本身无关)
			x执行：表示具有执行文件的权限
				前提：	①文件本身要能够执行②普通用户同时还需要有读r的权限才能执行
						③root都能够执行
		Linux目录的读、写、执行权限说明：
			r 表示具有浏览目录下面的文件及子目录的权限，ls
				（需要x权限配合）没有x，无法cd，ls会提示权限不够，只能看到文件名，无法看到属性
			w 表示具有增加、删除或修改目录内文件名（一般指文件名称）的权限；mv rm 
				（需要x权限配合）没有x，无法新增删除修改
			x 表示进入目录的权限；cd
				没有r无法列表，没有w无法创建和删除
		特殊权限位：
			suid	4000 权限字符sS 用户权限位上
			guid	2000 权限字符sS 用户组权限位上
			粘滞位	1000 权限字符tT 其他用户权限位	
			
	第11个字符:. SELINUX相关
第三列: 文件的硬链接数。硬连接是文件的又一个入口
	ls -ldi /test/oldboy/
	524985 drwxr-xr-x 4 root root 4096 Jul 20 23:17 /test/oldboy/
	4是怎么来的呢？/test/oldboy本身1个+/test/oldboy下的.算一个+/test/oldboy的所有子目录中的..
第四列：所属主或用户
	用户的角色是通过UID和GID识别的
	用户分为3类：
		1、超级用户
			root uid=0；git=0；uid为0就是root用户	UID仅0可以重复，其他都不可以
		2、虚拟用户
			为满足文件或程序的需要，而创建的。
			不能登录，不能使用，uid范围1-499；nologin
		3、普通用户
			管理员root创建的用户。uid从500开始
第五列：所属组
第六列：文件大小
第789列：文件被改动的时间
第十列：文件和目录的名字，存在于上级目录的block里
--------------------------------------------------------------------------------
useradd= 添加用户
	-g --gid指定组名称或id，不指定自动创建和用户名相同的组
	-G --groups 用户组列表，如g1,g2,g3...
	-s 登录shell -s /sbin/nologin
	-u 指定uid  useradd oldboy -u 505
	-M 不创建家目录
	-e 指定失效日期
	
	-D 修改/etc/default/useradd文件
	-c comment用户说明
	-d home_dir指定家目录
	useradd -g mysql mysql -s /sbin/nologin
	 
[root@localhost ~]#useradd test
[root@localhost ~]# for n in /etc/passwd /etc/shadow /etc/group /etc/gshadow;do echo $n"-->"`tail -1 $n`; done
/etc/passwd-->test:x:502:505::/home/test:/bin/bash
/etc/shadow-->test:!!:17368:0:99999:7:::
/etc/group-->test:x:505:
/etc/gshadow-->test:!::
/etc/passwd-->	root		:x			:0	:0	:root		:/root	:/bin/bash
				账号名称	账号密码	UID	GID	用户说明	家目录	shell解析器
/etc/shadow-->root:$1$5ULPVSgq$alsVgFbSnLzlG1bE62lxc.:17135:0:99999:7:::
/etc/group-->root:x:0:
/etc/gshadow-->root:::

控制useradd行为文件：
	/etc/default/useradd
	/etc/login.defs
--------------------------------------------------------------------------------
userdel= 删除用户
	-r --remove 删除用户家目录和他的mail spool目录
usermod= 修改用户，大多数参数和useradd相同
	-L 锁定用户的密码。这会在用户加密的密码之前放置一个"!"
	-U 解锁用户的密码。这将移除加密的密码之前的"!"
--------------------------------------------------------------------------------
查询用户相关信息
id= 查询用户
	-u uid
	-g gid
	-n 显示用户名，需要与u连用

w=	显示谁已经登录了，并且他在干什么
who= 显示谁已经登录了
users=显示谁已经登录了(仅显示用户名)
whoami 查看当前用户

last=展示最近登录的列表
	root     pts/2        192.168.200.150  Sun Jul 23 18:28   still logged in
	zsdai    pts/1        192.168.200.150  Sat Jul 22 12:36 - 14:27  (01:50)
lastlog=列出用户的最近登录情况
	Username         Port     From             Latest
	root             pts/2    192.168.200.150  Sun Jul 23 18:28:15 +0800 2017
	bin                                        **Never logged in**
groups=显示用户所有的组;如：groups oldboy6
	oldboy6 : oldboy6 root test
newgrp=指定登录时默认组,需要到该用户下
--------------------------------------------------------------------------------	
涉及文件:/etc/group /etc/gshadow
groupadd= 添加组
	-g 指定gid groupadd incahome -g 505
groupdel= 
--------------------------------------------------------------------------------
passwd修改密码,具备suid
	--stdin 从标准输入中读入密码
	
	-l 锁定密码
	-x 两次修改密码的最大天数
	-n 两次修改密码的最小天数
	-w 距离多少天提醒用户修改密码
	-i 过期后多少天，用户被禁掉，仅root能操作
如：echo 123456 | passwd --stdin oldboy
要求oldboy用户7天内不能改密码，60天以后必须改密码，过期前10天提醒，过期后30天后禁止登陆
passwd -x 60 -n 7 -w 10 -i 30 oldboy

oldboy:!!:17369:7:60:10:30::
--------------------------------------------------------------------------------
chage= 改变用户密码有效期
	-l 查看chage -l oldboy
	-E 设置账户过期日期，类似useradd -e。写法"YYY/MM/DD"
		chage -E "2020/12/31" oldboy
	
	-M 两次修改密码的最大天数
	-m 两次修改密码的最小天数
	-W 距离多少天提醒用户修改密码
--------------------------------------------------------------------------------
chmod= 改变文件权限
	-R 递归
方式1：chmod [数字组合] 文件名
方式2：chmod [用户类型] [+-=] [权限字符] 文件名

	用户类型	操作字符		权限字符
	u(user)		+ 加入(追加)	r
	g(group)					-
	o(others)	- 减去			w
	a(all)默认	= 设置（覆盖）	x
例如：rw-rw-r-x===>rwx--x--x
chmod u+x,g=x,o-r a.sh
--------------------------------------------------------------------------------
chgrp= 修改文件（夹）用户组
	-R 递归
--------------------------------------------------------------------------------
chown= 修改文件（夹）用户主
	-R 递归
	chown 用户名.用户组 文件 ==>同时修改主和组
	chown .用户组 文件	===>只修改组,相当于chgrp
	
	.可以用:取代
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
stat 展示文件或文件系统状态
--------------------------------------------------------------------------------
file 查看文件类型
--------------------------------------------------------------------------------
mkdir 创建目录
	-p 创建多级目录
--------------------------------------------------------------------------------
touch 创建文件
touch file{0..8}
touch file{a..z}
--------------------------------------------------------------------------------
cat
	-n 显示行号;类似nl命令
cat创建文件：
cat >/data/oldboy.txt<<EOF
I am studing linux
EOF
可以不是EOF，任何都可以，但是不要和内容重复
--------------------------------------------------------------------------------
tac 将文件内容按列反转输出
--------------------------------------------------------------------------------
less 按屏查看（支持空格、page up/down翻页；回车下一行）
	/ 向下搜索
	？向上搜索
more 按屏查看（支持空格翻页；回车下一行）
--------------------------------------------------------------------------------
cp
	-a:相当于-pdr
	-r:递归 recursive
	-p:保持文件属性 preserve
	-d ：若来源文件为连结文件的属性(link file)，则复制连结文件属性而非档案本身；no-dereference
	cp="cp -i"  -i:需要确认
--------------------------------------------------------------------------------
echo
	-n 输出内容不换行 echo -n  zsdai; echo zsdai
	-e 允许使用反斜杠转义echo -e "test\ntest"  必须在""中才能生效
		\t tab \n回车 \b退格
--------------------------------------------------------------------------------
箭头的方向就是数据的流向
	标准输入；代码为0
		<标准输入，相当于<0
		<<标准输入追加，相当于<<0
	标准输出，代码为1
		> 标准输出，相当于1>
		>> 标准输出追加，相当于1>>
	标准错误输出，代码为2
		2>标准错误输出
		2>>标准错误输出追加

	&>标准输出和标准错误输出
	&>>标准输出和标准错误输出追加
	ls >a.txt 2>&1  相当于上面&>
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
mv	==移动文件
--------------------------------------------------------------------------------
rm -f强制删除  -r递归删除，删除目录
	生产中尽量不要用rm
	替代方法：
		mv 移动到一个临时目录。回收站
		find删除
			find /root/ -type f -exec rm -f {} \;
			find / -type f | xargs rm -f
--------------------------------------------------------------------------------
find=   path   -option   [ -print ]   [ -exec   -ok   command ]   {} \;
	-type	按文件类型查找 f文件 
	-name   按照名字查找，内容最好用""括起来，！取反
	-maxdepth 指定查看的深度，小于改深度的都会被查出，似tree的-L，会查询出隐藏文件
	-a and
	-o or 	或者find ./ -name "aa.csv" -a -name "a.txt"
	-mtime  修改时间，+5==>倒数第5天之前的;5==>倒数第5天 ;-5===>倒数5天，即最近五天
	-atime  访问时间
	-ctime  改变时间（包含mtime，还包括属性、权限等）
	
经典例子：
删除一个目录下的文件，但保留一个指定文件
find /root/data/ -type f ! -name "file8" -exec rm -f {} \;
find /root/data/ -type f ! -name "file8" | xargs rm -f
--------------------------------------------------------------------------------
rmdir 删除空目录
--------------------------------------------------------------------------------
xargs 从标准输入构建和执行命令行
--------------------------------------------------------------------------------

head ==取文件的前N行，默认前10行
	-n 3  简写-3
--------------------------------------------------------------------------------
tail ==取文件的后N行，默认后10行
	 -n 3 简写-3
	 -f 跟踪一个文件尾部的实时变化
	 -F 和-f类似就，如果没有改文件，它会重试
--------------------------------------------------------------------------------
grep**** ==（擅长过滤器），把匹配到的整行打印出来，linux三剑客老三
	-v 排除
	-i 忽略大小写ignore-case
	-o, 只打印匹配的内容only-matching，而不是默认的整行
	-E 扩展正则extended-regexp，相当于egrep命令
	-n 行号line-number
	
	-a 在二进制文件中，以文本文件的方式搜索数据
	上下文控制
		-B 10 before 把匹配的内容前面10 行显示出来 grep "xxx" -B 10 test.txt
		-A 10 after	把匹配的内容后面10行显示出来 grep 20 -A 10 test.txt
		-C 10 after	把匹配的内容前后10行显示出来 grep 25 -C 5 test.txt
	--color=auto 给匹配到的字符串添加颜色
		grep 3306 --color=auto /etc/services
--------------------------------------------------------------------------------
sed=*****（stream editer）（擅长取行、替换） linux三剑客老二
	过滤：sed -n '/过滤的内容/处理的命令' 文件
		-n 已知默认输出
		-i 编辑文件内容
		-r 正则扩展；之后的特殊符号不需要转义，
			/不需要转义(转义也没错)，\需要转义
			有歧义的也需要转义stat /etc/hosts|sed -nr '4s#.*\(0(.*)/-.*#\1#gp'
	处理的命令
		p打印 d删除

	&表示当前行所有内容
sed -i 's#boy#girl#g' a.txt
		s 查找替换 g全局（不指定只替换每行第一个）
		# 分隔符，可以使用"/ @ "等替换
		= 行号
	后项引用:
sed -r 's#(正则表达式)#\1#g' a.txt 用场：前面的结果需要拿到后面用
ifconfig eth0 | sed -nr '2s#(.*:)(.*) (.*)#\2#gp'
stat /etc/hosts | sed -n '4p' | awk -F[\(\/] '{print $2}'

stat /etc/hosts|sed -nr '4s#.*\(0(.*)/-.*#\1#gp'
--------------------------------------------------------------------------------
awk*****（擅长取列）一门语言，过滤内容，三剑客老一
	awk '{print $1}' 默认空格分割; $0所有内容 $1第一列，$NF最后一列;$(NF-1) 
	NF 最后一列; 所有记录数number of fields 
	NR 行号，已经浏览的记录总数total records seen so far 
	-F 指定分隔符 awk -F":" '{ print $1"="$2}' /etc/passwd
		指定多个分隔符时， -F"[:/]" ，[]里面需要转移，"[]" 里面就不需要转移
		不指定分隔符，-F ""  之间必须有空格;
		[]之中的多个分隔符，可以使用正则-F "[:;]+" 来扩展，如果匹配的文本中存在[]中连续的分隔符
		如":;" 那么只当做一个来处理
		
	
	例如：awk '{if(NR>19 && NR<31) print $1}' test.txt
	ls -l | cut -c 2-10 |tr rwx- 4210 | awk -F "" '{print $1+$2+$3 $4+$5+$6 $7+$8+$9}'
--------------------------------------------------------------------------------
cut 简单的取列命令
	-d 指定分隔符
	-f 取分割后的第几列 cut -d" " -f3,7 a.txt
	-c 按字符取 cut -c 6-8 a.txt

--------------------------------------------------------------------------------
paste 合并文件，将文件的相同行合并成1行
paste a.txt b.txt
--------------------------------------------------------------------------------
rev 将文件内容按行反转输出
--------------------------------------------------------------------------------
wc 打印行号、字数、字节数
	 -c, --bytes字节数
     -m, --chars 字符数
     -l, --lines行数
	 -L 打最长的一行的长度

--------------------------------------------------------------------------------
yum linux里的包管理器，yum帮助解决依赖问题
	- y 不提示
	yum update 打补丁，==yum upgrade 
	例子：yum install tree -y
	下载tree包，然后调用rpm命令安装tree包，如果有依赖，帮你下载安装。
	 yum remove tree #千万不要用，会删除依赖
	 
修改vim /etc/yum.conf，keepcache=0表示yum安装后删除rpm包，=1表示下载后不删除缓存。
	 
--------------------------------------------------------------------------------
rpm 
	-ivh -i 安装 v 显示详情 h显示进度
	-qa q查询 a 所有
--------------------------------------------------------------------------------
tree 显示目录结构
	-L 展示文件的路径深度
	-d 只显示目录
--------------------------------------------------------------------------------
alias 别名
	alias cp='cp -i'
	alias rm='echo "rm can not be used,pls use mv"'
	当前用户别名生效的位置/root/.bashrc
	所有用户生效:/etc/bashrc 或 /etc/profile 使用source
--------------------------------------------------------------------------------
unalias 取消别名
	unalias cp
--------------------------------------------------------------------------------
seq= 序列sequence
	seq [OPTION]... LAST
    seq [OPTION]... FIRST LAST
    seq [OPTION]... FIRST INCREMENT LAST
	-s (separator)分隔符
	-w (equal-width)让所有位数保持一致，不足前面添0，如seq 100 ==>001 002...
--------------------------------------------------------------------------------
hostname 显示主机名
--------------------------------------------------------------------------------
uname= 打印系统信息
	-r 显示内核 2.6.32-358.el6.x86_64
	-m 操作系统位数 x86_64
	-n 查看主机名 hostname
	-a 显示所有
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
su= 切换用户
	su - 加-代表能把环境也切换过去；如果不加，则还是之前用户的环境变量 
	-c 切换到某个用户下执行命令，su - zsdai -c "pwd"
		场景：分用户方案启动服务命令，以普通用户启动某服务
		su - user1 -c '/bin/sh /home/tddoc/bin/deploy.sh'
	
--------------------------------------------------------------------------------
sudo=  /etc/sudoers（臣民可执行皇帝授权的操作）
	-l 查看sudo可执行的操作
	-K 让时间戳失效/var/db/sudo,下次又需要输入密码
	su - root 必须要密码
	sudo 需要权限
	
	

su - test 需要输入的是test的密码
sudo su - test 需要输入的是当前用户的密码
--------------------------------------------------------------------------------
visudo= 编辑sudo配置文件(皇帝root授权)
	visudo [-chqsV] [-f sudoers]
	-c 检查语法
	
用户		机器		可切换的角色	命令
User_Alias	Host_Alias	Runas_Alias		Cmnd_Alias
root    	ALL			=(ALL)       	ALL
zsdai		ALL			=(ALL)       	NOPASSWD:ALL
zsdai		ALL			=(ALL)       	/bin/touch,/usr/sbin/useradd	

#################### add by zsdai ###################
User_Alias      ADMINS = zsdai, oldboy, %test
User_Alias      CHUJIADMIN = oldgirl
Host_Alias      FILESERVERS = linux-yw1
Cmnd_Alias      ADMINCMD = /bin/rm
Cmnd_Alias      USER = /usr/sbin/useradd, /usr/sbin/userdel
Runas_Alias     OP = root
ADMINS        FILESERVERS=(OP)       NOPASSWD: ADMINCMD, USER
CHUJIADMIN    FILESERVERS=(OP)   NOPASSWD: USER
1)授权规则中的所有ALL字符串必须大写
2）授权命令由后向前生效，因此排除命令应该放在后面
	/usr/sbin/*,/sbin/*,!/usr/sbin/visudo,!/sbin/fdisk
3)一行内容超长可以使用\续行
4)!表示非，取反
--------------------------------------------------------------------------------
history= 查看历史命令,原理：由一个变量控制，env |grep -i old
	-d+行号  删除该条记录
	-c	全部清除
HISTSIZE 设置历史记录条数
--------------------------------------------------------------------------------
diff 文件1 文件2
vimdiff 高亮比较
--------------------------------------------------------------------------------
字符集：
	①由变量LANG控制，echo $LANG
	②临时生效：export LANG="zh_CN.UTF-8" 退出窗口后失效
	③永久生效：改/etc/sysconfig/i18n
	④echo 'export LANG="zh_CN.UTF-8'>>/etc/profile
客户端和服务端的字符集一致,避免乱码
--------------------------------------------------------------------------------
getenforce 检查selinux状态
setenforce 设置selinux状态 1启动 0警告 不启用
--------------------------------------------------------------------------------
runlevel 查看运行级别
init+级别号	切换级别
一共6个级别:
	0 关机模式
	1 单用户模式**
	2 无网络文件系统（NFS）的多用户模式
	3 文本模式（完整的多用户模式）**
	4 未使用的
	5 图形模式**
	6 重启模式
--------------------------------------------------------------------------------
chkconfig 开机服务管理 默认级别2345
	条件：类似/etc/init.d/sshd
		①脚本必须在/etc/init.d/下,且可执行
		②脚本里开头必须增加
			# chkconfig: 2345 56 26
			# description: test for chkconfig
	--list 查看
	--level 指定级别，可以同时指定多个如:35
	chkconfig +服务名+ on/off
	
关闭其他的服务
for name in `chkconfig | awk '{print $1}' | grep -Ev 'crond|network|rsyslog|sshd|sysstat'`;do chkconfig $name off; done;
chkconfig |grep 3:on| awk '{print $1}' | grep -Ev 'crond|network|rsyslog|sshd|sysstat' | sed -r 's/(.*)/chkconfig \1 off/g'|bash
chkconfig |grep 3:on| awk '{print $1}' | grep -Ev 'crond|network|rsyslog|sshd|sysstat' | awk '{print "chkconfig " $1 " off"}'| bash
--------------------------------------------------------------------------------
iptables 
	-L list
	-n 以number的形式显示ip，0.0.0.0 替代anywhere
	iptables -L -n
--------------------------------------------------------------------------------
系统环境变量：
PATH系统环境变量，执行ls cp等非内置命令时，系统会查找PATH里对应的路径是否有，没有就提示找不到该命令
临时修改export PATH="/tmp:$PATH"
永久修改/etc/profile
--------------------------------------------------------------------------------
which+变量名 查看变量路径；原理：从$PATH路径搜索,找不到则就没有
此外还可以使用
	find / type f -name "useradd"
	whereis -b useradd
	locate useradd

whereis 
	-b 查询二进制
locate 从数据中查询，新命令需要提前updatedb更新数据库，才能查询
	地点：/var/lib/mlocate/mlocate.db
--------------------------------------------------------------------------------
df= 查看磁盘使用情况
	-h 以人类可读
	-i 显示挂在磁盘inode信息，替代默认的block使用情况

	还可以使用cat /proc/mouts
--------------------------------------------------------------------------------
du= 计算文件使用空间
	-sh
	-s summarize 计算总大小
	-h 人类可读
--------------------------------------------------------------------------------
挂载方式：
	1.命令行手动
		mount -t ext4 -o noexec /dev/sda1 /mount
	2./etc/fstab
--------------------------------------------------------------------------------
-------------------------------------------------------------------------------- 
fsck= 检查修复linux文件系统（不要检查好磁盘），状态必须为卸载
	fsck -C -f -t ext3 /dev/sda5
--------------------------------------------------------------------------------
dmesg 内核打印的错误信息，如：硬件故障警告
--------------------------------------------------------------------------------
[root@linux-yw1 ~]# @前面表示用户名 @后面表示主机名 ~表示当前用户的家目录
	#表示root
	整个由$PS1这个变量决定 echo $PS1
--------------------------------------------------------------------------------
tar= 打包、压缩、解压
	-z gzip ungzip调用gzip
	-c create 新建文件
	-v verbose查看过程
	-x extract 解压提取；从压缩文件中提取文件
	-f file 对文件
	-t list查看压缩包中内容列表
	-C change to directory 指定解压目录
	-P absolute-names不会去除决定路径，危险！；会从绝对路径开始覆盖，而不是默认的当前路径
	--exclude 排除内容，可以指定多个 tar zcvf --execlude=oldboy/b.tar.gz ./oldboy
	-X 将要排除的内容写到文件中；相当于 --exclude-from=FILE
		tar zcvfX a.tar.gz paichu.txt ./oldboy
打包：尽量切到打包目录的上一级打包
tar zcvf etc.tar.gz /etc 打包
tar tf 查看包中内容

最佳实践:tar zcf /var/log.tar.gz log/
				 绝对路径(框)	 相对路径（苹果）
--------------------------------------------------------------------------------
date 查看当前时间
	-s	修改时间 date -s "2017/07/19 22.30"
	-d	显示过和未来的时间 date +%F -d "+2day"
		+2day -1month -3year hour min sec
	%w	周day of week (0..6); 0 is Sunday
	%F	2017-07-22
	%T	12:54:30
ntpdate 同步互联网时间 /usr/sbin/ntpdate time.nist.gov


常用格式：
date +%F		2017-07-22
date +%y-%m-%d	17-07-22
date +%Y-%m-%d	2017-07-22
date +%y-%m-%d" "%R:%S	17-07-22 12:50:16
date +%Y-%m-%d" "%R:%S	2017-07-22 12:50:31
date +%Y-%m-%d\ %H:%M:%S	2017-07-22 12:53:35
date +%F\ %T	2017-07-22 12:54:30

hwclock 将修改的时间同步到BIOS里
--------------------------------------------------------------------------------
ulimit 修改shell资源限制
	-n 文件描述符的最大值
	-a 查看所有
	-S 软use the `soft' resource limit
	-H 硬
调整文件描述符
	1)ulimit -SHn 65535 (临时)
	2)echo '*        -       nofile       65535'>>/etc/security/limits.conf

--------------------------------------------------------------------------------
ln 连接
硬链接：通过inode索引节点来链接，表现为多个文件名指向同一个inode
	ln 源文件 目标文件
软连接：
	ln -s 源文件 目标文件
	readlink 查看软连接原路径
	
	1.软连接类似windows的快捷方式
	2.软连接类似一个文本文件，里面存放的是源文件的路径，指向源文件实体
	3.删除源文件，软连接依然存在，但无法指向源文件内容了
	4.属于不同的文件，inode不同
	5.删除软连接 rm -f
	注意：	软连接相当于创建快捷方式，因此源文件必须是要存在的，目标文件是需要创建的快捷方式
			目录不可以创建硬链接，但可以创建软连接
			软连接在工作常用，硬链接较少
	
linux文件删除原理: 
	删除静态文件的条件是相关的所有硬链接均被删除,文件只要还有1个硬链接，
	文件的具体inode和block都不会被删除，当都被删除后，有新数据写入会覆盖这些或磁盘检查的时候就会被回收。
文件删除,由两个变量决定：
	i_link 文件硬链接数量
	i_cout 引用计数（代表有多少个程序访问这个文件，有一个程序使用i_count就+1）
删除条件：i_link=0 并且 i_count=0

文件连接小结：
	删除软连接，对源文件和硬链接没有影响
	删除硬链接，对源文件和软连接没有影响
	删除源文件，对硬链接没有影响，软连接失效
企业中应用：
	1、编译软件是指定版本号（/application/apache2.2.3）,访问时希望去掉版本号（/application/apache）
	可以设置软连接到编译路径，所有程序都访问软连接文件（/application/apache），当软件版本升级后，
	只需要删除原来软连接，重新建立到新的高版本路径上
	2、企业发布代码时，需要把代码传到一个新发布的临时目录或者新的站点目录，发布时要么mv，也可以
	重建软连接指向这信息目录或站点。
--------------------------------------------------------------------------------
wget+地址 下载
	-O 将内容输出到指定文件 wget -O /etc/yum.repos.d/CentOS-Base.repo http:...
	-T --timeout  指定下载超时时间(秒)
	-q --quiet 关闭输出
	
	--spider 爬虫，检查网站是不是好的，不会下载，只检查
	--tries=2 指定重试的次数
--------------------------------------------------------------------------------
chattr 给文件加/解锁，锁定后root也无法执行
	+ 加锁
	- 解锁
	= 设置
	i 不能改、删、重命名、link
	a append 只能够追加
	chattr +i  /etc/passwd /etc/shadow /etc/group /etc/gshadow /etc/inittab
	
	处理完后将chattr改名，这样即使别人拿到权限了，也无法解锁，因为不知道命令的名称
lsattr 查看加锁后的文件
--------------------------------------------------------------------------------
关机：
	shutdown -h now 立刻关机（生产常用）
	shutdown -h +1 1分钟后关机
	init 0	
	halt 立即停止系统，需要人工关闭电源（生产常用）
	halt -p 
	poweroff 立即停止系统，并且关闭电源
重启：
	reboot 生产常用
	shutdown -r now 生产常用
	shutdown -r +1
	init 6
注销：
	logout
	exit
	ctrl+d(常用)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
umask 打印真实有效的用户和组ID,控制创建文件的默认权限（了解）
源码:sed -n '65,69p' /etc/bashrc
如果uid>199并且用户名和组名相同，umask 002,否则umask 022
文件/目录默认权限的计算：
	文件：666-umask(umask有奇数，则该位-1)
	目录：777-umask
--------------------------------------------------------------------------------
crond 定时任务，
命令：crontab
	-l list
	-e edit 
	-u 指定用户执行该任务
分为两种：
1.系统默认：cat /etc/logrotate.d/syslog
	如/var/log/messages /var/log/secure
	
2.用户自定义
s -dl /etc/cron*
drwxr-xr-x. 2 root root 4096 Jul 16 21:42 /etc/cron.d
drwxr-xr-x. 2 root root 4096 Jul 16 16:54 /etc/cron.daily
-rw-r--r--. 1 root root    0 Jul 19  2011 /etc/cron.deny
drwxr-xr-x. 2 root root 4096 Jul 16 16:53 /etc/cron.hourly
drwxr-xr-x. 2 root root 4096 Jul 16 16:54 /etc/cron.monthly
-rw-r--r--. 1 root root  457 Sep 27  2011 /etc/crontab
drwxr-xr-x. 2 root root 4096 Sep 27  2011 /etc/cron.weekly
格式：
分		时		日		月		周
*		*		*		*		*
0-59/5	0-23/1	0-31	1-12	0-6(0,7均可代表周日)
	* 每、任何
	- 范围
	, 分隔 17,18,19
	/n 每单位时间，n为数字
	
规范：定时任务执行脚本统一使用(/bin/sh 脚本绝对路径)，还出不需要添加执行权限
此外还有at(对应服务atd)，适合执行一次
* 23,00-07/1 * * * /application/apache/binrestart 注意：由于分上为*因此代表每分钟，
	因此分钟一定要指定到具体时刻
anacron 适合非24*7服务器，他会检测服务器停机期间应该执行，并且没有执行的任务工作，并将该任务执行一次
要领小结：
	1.为定时任务规则加必要的注释
	2定时任务命令或程序最好写在脚本里执行
	3.执行shell脚本任务前加/bin/sh
	4.定时任务命令或脚本结尾加>/dev/null 2>&1或&>/dev/null;
		定时任务没执行一次都会给管理员发邮件，邮件服务没有开，
		就会导致C6:/var/spool/postfix/maildrop/队列占满。C5:/var/spool/clientmqueue
	5.在指定用户下执行相关的定时任务
	6.生产任务程序不要随意打印输出信息
	7.脚本路径必须规范
	8.配置定时任务规范操作过程
工作中调定时任务的方法：
	增加执行任务频率调试任务
	通过脚本日志调试定时任务 /bin/sh +x
	先定位到log调试，好了再>/dev/null 2>&1
	注意环境变量导致的定时任务故障（java）
	通过日志调试，/var/log/cron
--------------------------------------------------------------------------------
sh= /bin/sh
	-x 调试。查看执行过程
--------------------------------------------------------------------------------
dig 解析域名过程
dig 域名
dig  @8.8.8.8 www.baidu.com +trace
nslook
host +域名dig @8.8.8.8 www.baidu.com +trace
--------------------------------------------------------------------------------
free=
	-m 内存
free -hm
             total       used       free     shared    buffers     cached
Mem:          7.7G       7.2G       476M       392K       165M       1.0G
-/+ buffers/cache:       6.1G       1.6G <--剩余内存：linux机制将剩余内存当做缓存
Swap:         6.0G       343M       5.6G
1）Linux系统的特性是将系统不用的物理内存缓存起来，因此476M不是真实内存
2）系统真正可用内存是1.6G
3）buffer为写入缓冲区，sync将缓冲区的数据写入磁盘
4）cache为读取数据的缓存区
--------------------------------------------------------------------------------
磁盘:
	磁道：以磁盘盘面中心为圆心的不同半径的圆形轨迹
	柱面：不同盘面的相同大小的磁道构成了柱面
	扇区：磁道上的已到圆弧
	数据在磁盘的位置：0磁头 0磁道 1扇区
	以扇区为单位存储数据的（512byte）
磁盘容量计算：
方法1：
	磁盘容量=每个扇区大小（512b）*每个磁道扇区数*每个盘面磁道数*盘面数(或磁头数)
方法2：
	磁盘容量=柱面数(磁道数)*柱面大小（磁道大小*磁头数）
fdisk -l
	Disk /dev/sda1: 314 MB, 314572800 bytes
	255 heads, 63 sectors/track, 38 cylinders
	echo "512*63*38*255" | bc===312560640
	echo $((312560640/1024/1024))
机械磁盘读写原理：
	1.磁盘是按照柱面为单位读/写数据的 2.磁头之间的切换是电子指令切换
	3.寻道：磁头切换磁道，是机械的
--------------------------------------------------------------------------------
fdisk= 操作linux分区表*****
	-c 关闭DOS模式
	-u 在展示分区表的时候，显示扇区大小（替代柱面）
fdisk -uc /dev/sdb 
partprobe= 通知系统分区表的变化***
--------------------------------------------------------------------------------
parted 一般用于大于2T的磁盘分区***
--------------------------------------------------------------------------------
分区：fdisk=（小于2T） parted
	实质：设置修改分区表
格式化：mkfs=
	实质：创建文件系统
	mkfs.ext4 -I 1024 -b 2048 /dev/sdb1
	tune2fs -c -1 /dev/sdb1  设置不检查
挂载：mount=
	实质：给文件系统一个访问入口
	mount /dev/sdb1 /mnt
	-t 指定文件系统类型
	-o 操作
	
开机自动挂载：/etc/fstab
	UUID=45000a91-5118-4246-a2a6-942c2cab4eef /mnt ext4 defaults,noexec 0 0
	测试挂载：mount -a 读取/etc/fstab配置文件，然后df -h查看
	重启查看是否自动挂载
检查挂载：
	df -h,df -i
	cat /proc/mounts
	
e2fsck=check a Linux ext2/ext3/ext4 file system
resize2fs=ext2/ext3/ext4 file system resizer
dd= convert and copy a file
--------------------------------------------------------------------------------
lsof 列出打开的文件
	lsof -i :22
--------------------------------------------------------------------------------
rpcinfo 查看rpc信息
	-p 指定主机
showmount  显示一个NFS服务器的可挂载信息
	 showmount -e 192.168.200.5
--------------------------------------------------------------------------------
kill pid 杀进程
	-9 强杀
	-HUP -USR2 平滑处理参数
pkill(ps -ef出现的名称) look up or signal processes based on name and other attributes
killall kill processes by name，一直杀，直到提示
--------------------------------------------------------------------------------
rename 该文件名称，可批量
	 rename from(要改的) to(改成什么) file(改哪些文件)
	 eg:rename "txt" "sh" *.txt
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
重要目录：
	/dev 设备目录
	/etc/ 系统配置和服务配置文件、启动命令目录
	/proc 显示内核及进程信息的虚拟文件系统
	/tmp	临时文件
	/home	普通用户的家目录
	/root	超级管理员的家目录
	/var	变化的目录，一般是日志文件 cache文件
	/usr	用户程序和数据、帮助文件、二进制命令等的目录
	/bin和/sbin和/usr/sbin	用户命令的目录
--------------------------------------------------------------------------------
/etc/sysconfig/network-scripts/ifcfg-eth0	网卡配置文件
	DEVICE=eth0 #<===设备名
	HWADDR=00:62:64:84:f5:a1 #<===网卡的MAC地址，48位
	TYPE=Ethernet	#<===以太网
	UUID=633dd2a3-a323-4bda-b186-ec26327874a4 #<==唯一的用户标示
	ONBOOT=yes 是否开机启动
	BOOTPROTO=none	#<===引导协议；proto取下列值之一:
		none：引导时不适用协议，static 静态分配地址，bootp使用BOOTP协议，dhcp使用DHCP的协议
	IPADDR=192.168.200.250	#<===IP地址
	NETMASK=255.255.255.0	#<===子网掩码,划分网络号和主机号
	DNS=8.8.8.8	#<===IP和域名的相互解析
	GATEWAY=192.168.200.1	#<===网关
	PREFIX=24	#<===
	DEFROUTE=yes	#<===
	IPV4_FAILURE_FATAL=yes	#<===
	IPV6INIT=no#<===
	NAME=myNetCon#<===
	
	ONBOOT=yes
	LAST_CONNECT=1495678481
启动网卡
	ifup
停止网卡
	ifdown
重启网络
	/etc/init.d/network restart 条件onboot=yes
	service network restart	条件onboot=yes
	ifdown eth0 && ifup eth0
查看网卡
	ifconfig
	ip addr
--------------------------------------------------------------------------------
/etc/resolv.conf	DNS客户端配置文件;	
	CentOS6网卡文件中可以配置DNS，且网卡的优先，/etc/resolv.conf里配置的很容易被清除
	blkid 磁盘设备的信息 id类似网卡中的UUID？(不是)
1)网卡如果配置DNS会优先于/etc/resolv.conf的配置，并且重启网卡会把/etc/resolv.conf里覆盖
2)网卡如果没有配置DNS，那么在/etc/resolv.conf中会失效，如果有多快网卡（DHCP)获取的时候可
  能会覆盖/etc/resolv.conf里已有的配置
--------------------------------------------------------------------------------
/etc/hosts	局域网 主机名和IP解析,可以理解为局域网DNS(手工维护);
	对应windows的文件；C:\Windows\System32\drivers\etc\hosts
	
  定义规范：
	172.38.18.23 realtime-search.config-vip.taobao.com
  hosts在企业中的作用
	1.开发，产品，测试，可以通过正式的域名测试
	2.服务器之间的调用可以用域名（内部DNS）,方便迁移
--------------------------------------------------------------------------------
/etc/sysconfig/network	配置主机名称( HOSTNAME )与启动 Network 与否
	
grep "/etc/sysconfig/network" /etc/init.d/network 可知网卡启动会调用改文件
--------------------------------------------------------------------------------
修改主机名的规范步骤：
1）hostname oldboylinux
2）vim /etc/sysconfig/network
3) vim /etc/hosts
如果用setup-->DNS设置主机名，永久生效（但命令行不生效），影响/etc/sysconfig/network和/etc/hosts
--------------------------------------------------------------------------------
*****/etc/fstab (开机挂载)设置文件系统挂载信息的文件，使得开机能够自动挂载磁盘分区
	一旦配置错误将无法启动
 
	要挂在的设备或远程文件系统	挂载点		文件系统类型	挂在的选项		dump备份	fsck开机检查差磁盘
	tmpfs						/dev/shm	tmpfs   		defaults        0 			0
	devpts						/dev/pts	devpts  		gid=5,mode=620  0 			0
	sysfs						/sys		sysfs   		defaults        0 			0
	proc						/proc		proc    		defaults        0 			0

	挂在类型：设备、UUID、磁盘标签、远程文件系统
	文件系统类型
		主要：ext234、ntfs、xfs、tmpfs、proc（虚拟）、reiserfs（小文件效率高）
		查看支持的文件系统：ls  /lib/modules/`uname -r`/kernel/fs
此外，在rc.local中添加上面的信息，也可以实现挂在

a.测试手动挂载：
	1.创建一个虚拟的块设备
			由			生产			块大小		块数量
		dd if=/dev/zero of=/dev/sdb1 bs=4096 count=100
	2.格式化
		mkfs.ext4 /dev/sdb1或者mkfs -t ext4 /dev/sdb1
	3.挂载
		mount -t ext4 -o loop,noatime,noexec /dev/sdb1 /mnt
	4.查看
		df -h
b.修改fstab文件
	1.创建一个虚拟的块设备
		dd if=/dev/zero of=/opt/tmp bs=4096 count=100
	2.格式化
		mkfs.ext4 /opt/tmp
	3.在/etc/fstab文件中添加
	/opt/tmp	/mnt	ext4    defaults,loop,noexec    0 0
	4.reboot

fstab出问题，修复方式：
	1.开机提示，输入密码，修复
	2.救援模式，rescue，修改/etc/fstab(只读状态) mount -o rw,remount /xxx	
--------------------------------------------------------------------------------
/etc/rc.local 程序开机启动,生产把它作为服务器的档案文件

让一个程序开机启动：
	1) chkconfig (条件/etc/init.d/sshd)
	2) 放入rc.local文件 (建议)
	
NFS网络文件系统挂载时，网卡还没有启动就已经加载fstab了
	mount -t nfs 10.0.0.7：/data /mnt
--------------------------------------------------------------------------------
/etc/inittab 设置系统的运行级别，加载相应级别的配置文件。
	***linux开机启动流程
--------------------------------------------------------------------------------
/etc/init.d  yum/rpm安装的服务

/etc/xinit.d 很少用了 除rsync
--------------------------------------------------------------------------------
/etc/profile 全局配置文件
/etc/profile.d/ 放置脚本，每一次登录或者重启都会执行
--------------------------------------------------------------------------------
/etc/motd  登录后显示的字符串
--------------------------------------------------------------------------------
/etc/issue 记录用户登录前显示的系统版本等信息
cat -n /etc/issue
     1	CentOS release 6.9 (Final)
     2	Kernel \r on an \m
安全优化清除   >/etc/issue
ll /etc/issue*（/etc/issue /etc/issue.net）
--------------------------------------------------------------------------------
cat /etc/redhat-release 查看系统版本号
--------------------------------------------------------------------------------
 /etc/passwd 账户文件
 /etc/shadow 账户密码文件
 /etc/group	 组文件
 /etc/gshadow 组密码文件
--------------------------------------------------------------------------------
/etc/sudoers 可以使用sudo命令的配置文件，
最好使用visudo
--------------------------------------------------------------------------------
/usr/local 默认安装程序路径，window的program files
--------------------------------------------------------------------------------
/usr/src 源代码程序
--------------------------------------------------------------------------------
/var/log/messages 系统日志。自动轮训按每周rsyslog服务
/var/log/secure 安全日志，SSH连接日志
硬件故障 执行命令dmesg
--------------------------------------------------------------------------------
开机启动服务：sshd  rsyslog network crond sysstat
/var/spool/cron/ 定时任务目录;也有写在/etc/crontab里的，但不规范,why?

/var/spool/clientmqueue sendmai临时文件目录，有很多原因会导致此目录文件比较多
	如crontab定时任务不加>/dev/null;导致/var所在的分区inode数量被浪费完，
	无法写入文件的情况。***C64 不会装sendmail所以不会出现改问题。
	企业案例：
	inode被耗尽。no space left on device;
--------------------------------------------------------------------------------
/proc/cpuinfo关于处理器信息；类型、厂家、型号和性能等 top查看cpu，sar
/proc/meminfo 系统内存信息 free -m
/proc/devices 当前运行内核配置的所有设备清单
/proc/dma 当前正在使用的DMA通道
/proc/filesystems 当前运行内核所配置的文件系统
/proc/interrupts ****正在使用的中断，和曾经有多少个中断。
/proc/ioports 当前正在使用的I/O端口
/proc/loadavg *****系统负载平均值信息，uptime的结果
	负载值的核数,查看负载top uptime
/proc/mounts **设备的挂载信息，似df -h
--------------------------------------------------------------------------------
/etc/skel 存放新用户配置文件的目录，当我们添加新用户useradd时，这个目录下的所有文件否会自动被复制到
	新添加用户的家目录下；默认情况下/etc/skel目录下的所有文件都是隐藏文件。
	因此：我们在修改skel下的文件后，新建的用户也将拷贝改变后的文件
	
创建就能拷贝这是由useradd命令的一个配置文件/etc/default/useradd控制的，里面也有一些参数
该文件可以使用useradd -D 来进行编辑,之后加参数-e -g..
--------------------------------------------------------------------------------
/etc/login.defs 是用来定义创建用户时所需要的一些用户的配置信息，如创建用户时，是否需要家目录
	UID和GID的范围，用户及密码的有效期限等等。
--------------------------------------------------------------------------------
/dev/null 是Linux系统中的"黑洞",是一个特殊的字符设备，所有写入其中的数据，都会被丢弃，
  作用：1.清空文件 cat /dev/null>/etc/hosts 
		2.忽略所有输出，如：定时任务
/dev/zero 也是一个特殊的字符设备文件，当使用或读取它的时候，它会提供无限连续不断的空的数据流（特殊的数据格式流）
  应用场景：
	a./dev/zero文件覆盖其他文件信息。 echo oldboy>new.txt  ddif=/dev/zero of=new.txt bs=1M count=10 
	b.产生指定大小的空文件，例如：交换文件、模拟虚拟文件系统等。
		dd if=/dev/zeroof=test.data bs=1M count=2  #<==生成块大小1M，含有2个块的文件。
--------------------------------------------------------------------------------
目录结构总结：http://yangrong.blog.51cto.com/6945369/1288072
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
TMOUT 超时时间（ssh客户端） export TMOUT=300;
HISTSIZE 设置命令行历史记录条数
HISTFILESIZE，设置家中.bash_history文件的保存数量
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
blkid 磁盘设备的信息 id
--------------------------------------------------------------------------------

.当前目录./
	隐藏文件
--------------------------------------------------------------------------------
.. 相对路径,当前目录上级目录../
--------------------------------------------------------------------------------
/ 根目录，路径分隔符
--------------------------------------------------------------------------------
; 命令分隔符 pwd;ls
--------------------------------------------------------------------------------
{} 生产数字或者字母序列 echo{a..z} mkdir dir{1-100} 
--------------------------------------------------------------------------------
! 
	!+字母 表示调出最近一次以此字母开头的命令
	!! 调用最近一次命令
	!+数字 表示调出历史的第几条命令
--------------------------------------------------------------------------------
-
	cd - 回到上一次所在的目录，原理：有一个变量时刻记录着，env |grep -i grep
--------------------------------------------------------------------------------
| 管道
--------------------------------------------------------------------------------
\ 转义
--------------------------------------------------------------------------------
~ 用户的家目录，例如针对root，~就代表/root
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
通配符:
	通配符一般用于用户命令行bash环境
	正则表达式是用于grep、sed、awk等
	*  	通配符表示任意（0-n）个字符
	？	通配符代表任意一个字符
	;	连续不同命令的分隔符
	#	配置文件的注释
	|	管道
	~ 	用户的家目录
	-	上一次访问的目录
	$	变量前需要加的符号
	/	路径分隔符
	< << > >>	重定向
	'	所见所得，不解释
	"	字符串，解析变量
	`	执行命令;等价于	$()
	{}	区块代码或序列
	! && ||
	. ..
--------------------------------------------------------------------------------
http://aresxin.blog.51cto.com/4734097/1602624
正则表达式：为了处理大量字符串而定义的一套规则和方法
以grep为例，sed和awk有少些区别
学习正则准备工作:
	alias grep='grep --color=auto'
	export LC_ALL=C
基础正则表达式
	. 代表且只能代表单个任意字符，空格也算
	* 前面的字符重复0到n次
	.* 任意长度字符0-n
	^ 以什么开头
	$ 以什么结尾
	[] 匹配字符集合内的任意一个字符
		[a-z] [0-9]
		[^a-z] ^在[]中表示取反，不是a-z的
	{n,m} 重复前面的例子，n到m次
		{n,}至少n次，{,m}最多m次
扩展正则表达式（egrep或grep -E）
	+ 前面的字符重复1到n次
	？前面的字符重复0或1次
	| 用或的方式查找多个符合的字符串
	() 找出"用户组"字符串
\< \> 匹配一个单词的开头或结尾	grep -E '\<g|d\>' oldboy.log
\b	单词边界	\bcool\b 匹配cool，不匹配coolant
\B	非单词边界	cool\B 	 匹配coolant，不匹配cool
\w 	单个单词字符（字母、数字与_）
\W	非单个单词字符（字母、数字与_）
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
tab 自动补全
ctrl+a 光标到最前
ctrl+e 光标到最后(end)
ctrl+u 删除光标之前
ctrl+k 删除光标之后
ctrl+c 强制中断
ctrl+l 清屏 clear
ctrl+d 退出当前回话，相当于exit
ctrl+r 查找
ctrl+y 粘贴 shift+insert
vim 
	O 上一行编辑
	行号+gg；直接定位到该行
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
